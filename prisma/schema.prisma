// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  P
  B
  E
  RH
  G
  S
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  role      UserRole?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  profile   Profile?
  incidents Incident[]
}

model Profile {
  id                          Int                     @id @default(autoincrement())
  name                        String?
  national_id                 Int?                    @unique
  sex                         String?
  birth_date                  DateTime?               @db.Date
  address                     String?
  summary                     String?
  education_level             String?
  profession                  String?
  area_of_interest            String[]
  has_relative_working        String?
  has_commercial_relationship String?
  has_volunteered             String?
  has_own_business            String?
  avatar                      String?
  college_name                String?
  college_major               String?
  project_name                String?
  user                        User                    @relation(fields: [user_id], references: [id])
  user_id                     Int                     @unique
  experience                  ProfileExperience[]
  certifications              ProfileCertifications[]
  files                       File[]
  history                     History[]
}

model File {
  id   Int    @id @default(autoincrement())
  path String
  type String

  profile    Profile? @relation(fields: [profile_id], references: [id])
  profile_id Int?
}

model ProfileExperience {
  id          Int       @id @default(autoincrement())
  company     String
  position    String
  description String
  location    String
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  profile     Profile?  @relation(fields: [profile_id], references: [id])
  profile_id  Int?
}

model ProfileCertifications {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  issuer      String
  start_date  DateTime @db.Date
  duration    Int
  profile     Profile? @relation(fields: [profile_id], references: [id])
  profile_id  Int?
}

model History {
  id                    Int       @id @default(autoincrement())
  position              String
  contract_reason       String?
  contract_type         String?
  contract_start_date   DateTime? @db.Date
  contract_end_date     DateTime? @db.Date
  organizational_unit   String
  comment               String?
  additional_comment_1  String?
  additional_comment_2  String?
  medical_condition     String?
  movement_type         String?
  reclassification_date DateTime? @db.Date
  integration_date      DateTime? @db.Date
  shift                 String?
  profile               Profile   @relation(fields: [profile_id], references: [id])
  profile_id            Int
}

model Incident {
  id          Int      @id @default(autoincrement())
  description String
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int
}

model Course {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  cover         String
  course_module CourseModule[]
}

model CourseModule {
  id                     Int                    @id @default(autoincrement())
  title                  String
  course                 Course                 @relation(fields: [course_id], references: [id])
  course_id              Int
  course_module_resource CourseModuleResource[]
}

model CourseModuleResource {
  id        Int          @id @default(autoincrement())
  type      String
  url       String?
  module    CourseModule @relation(fields: [module_id], references: [id])
  module_id Int
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Json
}
